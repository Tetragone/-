#include <string>
#include <vector>
#include <queue>

using namespace std;

vector<int> solution(vector<string> operations) {
    priority_queue<int, vector<int>, greater<int>> minQueue;
    priority_queue<int> maxQueue;
    vector<int> answer;
    int operSize = operations.size();
    
    for (auto x : operations) {
        if (x[0] == 'I') {
            if (x[2] == '-') {
                maxQueue.push((-1) * stoi(x.substr(3, x.size() - 3)));
                minQueue.push((-1) * stoi(x.substr(3, x.size() - 3)));
            } else {
                maxQueue.push(stoi(x.substr(2, x.size() - 2)));
                minQueue.push(stoi(x.substr(2, x.size() - 2)));
            }
        } 
        else if (x[2] == '1'){
            if (!maxQueue.empty()) {
                maxQueue.pop();
            }
        } else {
            if (!minQueue.empty()) {
                minQueue.pop();
            }
        }
        
        if (!maxQueue.empty() && !minQueue.empty() && maxQueue.top() < minQueue.top()) {
            while (!maxQueue.empty()) maxQueue.pop();
            while (!minQueue.empty()) minQueue.pop();
        }
    }
    
    if (maxQueue.empty()) {
        answer.push_back(0);
        answer.push_back(0);
    } else if (maxQueue.top() >= minQueue.top()) {
        answer.push_back(maxQueue.top());
        answer.push_back(minQueue.top());
    } else {
        answer.push_back(0);
        answer.push_back(0);
    }
    
    return answer;
}

// 오름차순 내림 차순으로 사용. 
// 입력 5 3 4 2 
// 2 3 4 5
// 5 4 3 2 
// D1 D1 D1 D-1
// 최솟값이 최댓값보다 큰경우 clear를 해준다. 
//stoi(test.substr(2, test.size() - 2));
