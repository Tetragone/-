#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

vector<int> saveChange;

int solution(vector<vector<int>> routes) {
    saveChange.resize(10005);
    vector<vector<int>> sortedByIn;
    int answer = 0;
    int roSize = routes.size();
    
    for (int i = 0; i < roSize; i++) routes[i].push_back(i);
    
    sortedByIn.assign(routes.begin(), routes.end());
    sort(sortedByIn.begin(), sortedByIn.end(), [] (vector<int> x, vector<int> y) {
        return !(x[0] > y[0]);
    });
    
    auto record = sortedByIn.begin();
    
    sort(routes.begin(), routes.end(), [] (vector<int> x, vector<int> y) {
        return !(x[1] > y[1]);
    });
    
    for (auto x : routes) {
        // cout << x[1] << "\n";
        if (saveChange[x[2]] == 0) {
            while(record != sortedByIn.end() && x[1] >= *(record->begin())) {
                saveChange[*(record->begin() + 2)] = 1;
                record++;
            }
            answer++;
        }
    }
    
    return answer;
}
// 끝나는 점을 기준으로 정렬
// 가장 작은 점보다 아래에서 시작하는 선들을 모두 제거
// 그리고 answer++
// 얕은 복사라고 가정하고 문제를 풀자
